{"uid":"f5cf84920f9542bc","name":"Validate Council Output [DorsetCouncil-None-None]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"9fa7d7cb5c863d45fe9f4c51c5fb024f","time":{"start":1705711622417,"stop":1705711717618,"duration":95201},"status":"failed","statusMessage":"UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value","statusTrace":"fixturefunc = <function scrape_step at 0x7fa8cf1c0860>\nrequest = <FixtureRequest for <Function test_scenario_outline[DorsetCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa8ce713890>, 'council': 'DorsetCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DorsetCouncil.CouncilClass object at 0x7fa8cfb8f750>\npage = <Response [200]>\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': None, ...}\ndata = {'bins': []}, collections = []\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en-gb\">\n<head>\n<title>View results - Dorset Council</title>\n<meta content=\"initial-scale...ncil_Website_feedback?pageurl=' + referrer);\r\n                }\r\n\r\n            </script>\n</div>\n</div>\n</body>\n</html>\n\nresults = [<li class=\"resultListItem\">\n<a href=\"https://www.dorsetcouncil.gov.uk/bins-recycling-and-litter/recycling-centres-and...ices in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>]\nr = <li class=\"resultListItem\">\r\n                You can search for other health services in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n        collections = []\n    \n        # Parse the page and find all the result boxes\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n        results = soup.find_all(\"li\", {\"class\": \"resultListItem\"})\n    \n        # If the result box has a wanted string in, we can use it. Check the contents of each box and find the\n        # desired text and dates\n        for r in results:\n            if \"Your next\" in r.text:\n                if type(r.contents[10]) is element.NavigableString:\n                    bin_text = r.contents[10].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[11].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n                else:\n                    bin_text = r.contents[11].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[12].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n    \n                if bin_date.date() >= datetime.now().date():\n                    collections.append((bin_text, bin_date))\n    \n                # Sort the text and date elements by date\n                ordered_data = sorted(collections, key=lambda x: x[1])\n    \n        # Put the elements into the dictionary\n>       for item in ordered_data:\nE       UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value\n\nuk_bin_collection/uk_bin_collection/councils/DorsetCouncil.py:51: UnboundLocalError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value","statusTrace":"fixturefunc = <function scrape_step at 0x7fa8cf1c0860>\nrequest = <FixtureRequest for <Function test_scenario_outline[DorsetCouncil-None-None]>>\nkwargs = {'context': <test_validate_council.context.<locals>.Context object at 0x7fa8ce713890>, 'council': 'DorsetCouncil', 'selenium_mode': 'None', 'selenium_url': 'None'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.11/lib/python3.11/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:92: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:96: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:115: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:66: in template_method\n    bin_data_dict = self.parse_data(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <DorsetCouncil.CouncilClass object at 0x7fa8cfb8f750>\npage = <Response [200]>\nkwargs = {'headless': True, 'paon': None, 'postcode': None, 'uprn': None, ...}\ndata = {'bins': []}, collections = []\nsoup = \n<!DOCTYPE html>\n\n<html lang=\"en-gb\">\n<head>\n<title>View results - Dorset Council</title>\n<meta content=\"initial-scale...ncil_Website_feedback?pageurl=' + referrer);\r\n                }\r\n\r\n            </script>\n</div>\n</div>\n</body>\n</html>\n\nresults = [<li class=\"resultListItem\">\n<a href=\"https://www.dorsetcouncil.gov.uk/bins-recycling-and-litter/recycling-centres-and...ices in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>]\nr = <li class=\"resultListItem\">\r\n                You can search for other health services in your area on the <a href=\"http://www.nhs.uk/Service-Search\" title=\"NHS Choices Website\">NHS website.</a>\n</li>\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n        collections = []\n    \n        # Parse the page and find all the result boxes\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n        results = soup.find_all(\"li\", {\"class\": \"resultListItem\"})\n    \n        # If the result box has a wanted string in, we can use it. Check the contents of each box and find the\n        # desired text and dates\n        for r in results:\n            if \"Your next\" in r.text:\n                if type(r.contents[10]) is element.NavigableString:\n                    bin_text = r.contents[10].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[11].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n                else:\n                    bin_text = r.contents[11].text.split(\" \")[2].title() + \" bin\"\n                    bin_date = datetime.strptime(\n                        remove_ordinal_indicator_from_date_string(\n                            r.contents[12].text.strip()\n                        ),\n                        \"%A %d %B %Y\",\n                    )\n    \n                if bin_date.date() >= datetime.now().date():\n                    collections.append((bin_text, bin_date))\n    \n                # Sort the text and date elements by date\n                ordered_data = sorted(collections, key=lambda x: x[1])\n    \n        # Put the elements into the dictionary\n>       for item in ordered_data:\nE       UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value\n\nuk_bin_collection/uk_bin_collection/councils/DorsetCouncil.py:51: UnboundLocalError","steps":[{"name":"Given the council: DorsetCouncil","time":{"start":1705711622417,"stop":1705711622417,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from DorsetCouncil using None and the None is set","time":{"start":1705711622417,"stop":1705711717618,"duration":95201},"status":"failed","statusMessage":"cannot access local variable 'ordered_data' where it is not associated with a value","statusTrace":"UnboundLocalError: cannot access local variable 'ordered_data' where it is not associated with a value\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az659-740"},{"name":"thread","value":"2730-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"DorsetCouncil"},{"name":"selenium_mode","value":"None"},{"name":"selenium_url","value":"None"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":5,"unknown":0,"total":6},"items":[{"uid":"6621c4d4b93104e0","reportUrl":"https://bfayers.github.io/UKBinCollectionData/3.11/6//#testresult/6621c4d4b93104e0","status":"passed","time":{"start":1705625300763,"stop":1705625301884,"duration":1121}},{"uid":"a71c46bc134d7cca","reportUrl":"https://bfayers.github.io/UKBinCollectionData/3.11/5//#testresult/a71c46bc134d7cca","status":"passed","time":{"start":1705538868101,"stop":1705538869356,"duration":1255}},{"uid":"7f0e1da3b2288917","reportUrl":"https://bfayers.github.io/UKBinCollectionData/3.11/4//#testresult/7f0e1da3b2288917","status":"passed","time":{"start":1705452481064,"stop":1705452482466,"duration":1402}},{"uid":"a02a8a91efe1f963","reportUrl":"https://bfayers.github.io/UKBinCollectionData/3.11/3//#testresult/a02a8a91efe1f963","status":"passed","time":{"start":1705366049090,"stop":1705366050300,"duration":1210}},{"uid":"1981ec4385ae962a","reportUrl":"https://bfayers.github.io/UKBinCollectionData/3.11/2//#testresult/1981ec4385ae962a","status":"passed","time":{"start":1705279854388,"stop":1705279855514,"duration":1126}}]},"tags":[]},"source":"f5cf84920f9542bc.json","parameterValues":["DorsetCouncil","None","None"]}